<?php
//Yep this cli pretty much a duplicate of laravel or lumen.
//But i dont like laravel because it's model forces me to query database using laravel style.
//And this framework might also support more features later.
//For starter, this framework serve static files from PHP. So we can put middleware for static files.

require_once 'engine/cli/printFunctions.php';
require_once 'vendor/autoload.php';

use Fandisus\Lolok\DB;
use Fandisus\Lolok\Files;
use Fandisus\Lolok\TableComposer;
use Garden\Cli\Cli;

$cli = Cli::create()
  ->command('create-config')
  ->description('Create engine/config.json file from config.sample.json')
  //---------
  ->command('db-init')
  ->description('Create lolokdb table for db operation log.')
  ->opt('force:f', 'Recreate lolokdb table', false, 'boolean')
  //----------
  ->command('db-plan')
  ->description('Create database plan file.')
  ->arg('name', 'The database plan name', true)
  //----------
  ->command('db-review-plans')
  ->description('Show deployed and undeployed plans.')
  //----------
  ->command('db-deploy')
  ->description('Deploy database plan files.')
  //----------
  ->command('db-undeploy')
  ->description('Undeploy database plan files.')
  //----------
  ->command('dbseed-create')
  ->description('Create db seed file.')
  ->arg('name', 'The db seed name(s)', true)
  //----------
  ->command('dbseed-run')
  ->description('Run db seed file.')
  ->opt('all:a', 'Run all db seed files', false, 'boolean')
  ->arg('name', 'The db seed name(s)', false)
  //----------
  ->command('*')
  ->opt('connection:c', 'The database connection name in config.json. If not specified, will use first connection.', false, 'string')
  ;
$garden = $cli->parse($argv);

//------------ create-config
if ($garden->getCommand() === 'create-config') {
  if (!file_exists('engine/config.json')) {
    $content = file_get_contents('engine/config.sample.json');
    $newContent = str_replace('REPLACE_THIS_SECRET',bin2hex(random_bytes(32)), $content);
    file_put_contents('engine/config.json', $newContent);
  }
  exit;
}

//------- Initialize engine
$config = json_decode(file_get_contents('engine/config.json'));

$files = Files::GetDirFiles('engine/_preload');
foreach ($files as $v) include($v);

//After getting APPNAMESPACE from engine/_preload/constants.php --> config.json, autoload models:
include "engine/models/autoload.php";
//------- END Initialize engine

//Get database connection
$arrDb = (array) $config->DBConnections;
$conn = $garden->getOpt('connection');
@$dbConfig = ($conn === null) ? array_shift($arrDb) : $config->DBConnections->$conn;
if ($dbConfig === null) { printError('Failed to get database connection config'); die; }
else {
  DB::setConnectionWithObject($dbConfig);
  try { DB::init(); } catch (\Exception $ex) {
    printError('Failed to connect to database');
    echo $ex->getMessage(); die;
  }
}

$args = $garden->getArgs();
$command = $garden->getCommand();


//------------ db-init
if ($command === 'db-init') {
  if (DB::tableExists('lolokdb')) { printError('Lolokdb already initialized'); }
  $t = new TableComposer('lolokdb');
  $t->increments('id')->primary()
    ->string('deployment', 100)
    ->integer('batch')->index();
  foreach ($t->parse() as $sql) DB::exec($sql,[]);
}

//------------ db-plan
if ($command === 'db-plan') foreach ($args as $plan) createPlan($plan);
function createPlan($planName) {
  $planName = str_replace(' ', '_', ucfirst($planName)); //If name uses spaces, just replace with underscore
  preg_match('/[\W]+/', $planName, $matches);
  if (count($matches)) { printError("Invalid plan name: $planName"); die; }

  $template = file_get_contents(DIR.'/engine/cli/planTemplate.php');
  $template = str_replace('PLAN_NAME', $planName, $template);
  
  $filename = date('Ymd-His')."-$planName.php";
  file_put_contents(DIR.DS.'engine'.DS.'dbplans'.DS.$filename, $template);
  printSuccess($filename.' created');
}

$col = (DB::$driver === 'oracle') ? 'DEPLOYMENT' : 'deployment';
//------------ db-deploy
if ($command === 'db-deploy') {
  $nextBatch = DB::getOneVal('SELECT COALESCE(MAX(batch),0)+1 next_batch FROM lolokdb');
  $files = Files::GetDirFiles('engine/dbplans', true);
  $dbFiles = DB::get('SELECT deployment FROM lolokdb',[]);
  $dbFiles = array_map(function($row) use ($col) { return $row->$col; }, $dbFiles);
  foreach ($files as $f) {
    if (in_array($f->filename, $dbFiles)) continue;
    $className = substr(substr($f->filename, 16, 999), 0, -4);
    include $f->path;
    $className::deploy();
    DB::insert('INSERT INTO lolokdb (deployment, batch) VALUES (:FILE, :BATCH)', ['FILE'=>$f->filename, 'BATCH'=>$nextBatch]);
    printInfo($f->path.' deployed');
  }
  printSuccess('Deploy finished');
}

//------------ db-undeploy
if ($command === 'db-undeploy') {
  $prevBatch = DB::getOneVal('SELECT COALESCE(MAX(batch),0) prev_batch FROM lolokdb');
  $files = DB::get('SELECT deployment FROM lolokdb WHERE batch=:BATCH ORDER BY id DESC',['BATCH'=>$prevBatch]);
  foreach ($files as $f) {
    $className = substr(substr($f->$col, 16, 999), 0, -4);
    include 'engine/dbplans/'.$f->$col;
    $className::undeploy();
    printInfo($f->$col.' undeployed');
  }
  DB::exec('DELETE FROM lolokdb WHERE batch=:BATCH', ['BATCH'=>$prevBatch]);
  printSuccess('Undeploy finished');
}

//------------ dbseed-create
if ($command === 'dbseed-create') foreach ($args as $seed) createSeed($seed);
function createSeed($seedName) {
  $seedName = str_replace(' ', '_', ucfirst($seedName)); //If name uses spaces, just replace with underscore
  preg_match('/[\W]+/', $seedName, $matches);
  if (count($matches)) { printError("Invalid seed name: $seedName"); die; }

  $template = file_get_contents(DIR.'/engine/cli/seedTemplate.php');
  $template = str_replace('SEED_TEMPLATE', $seedName, $template);
  
  $filename = "$seedName.seed.php";
  file_put_contents(DIR.DS.'engine'.DS.'dbseed'.DS.$filename, $template);
  printSuccess($filename.' created');
}

if ($command === 'dbseed-run') {
  $files = Files::GetDirFiles('engine/dbseed', true);
  foreach ($files as $f) {
    $className = substr($f->filename, 0, -9);
    include $f->path;
    $className::run();
    printInfo($f->path.' finished running.');
  }
  printSuccess('Seed run finished');
}



?>